/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
class Solution {
public:
    struct Compare {
        bool operator()(ListNode* node1, ListNode* node2) {
            return node1->val > node2->val;
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, Compare> pq;
        for (auto it : lists) {
            if(it) pq.push(it);
        }

        ListNode* dummy = new ListNode(-1);
        ListNode* result = dummy;

        while (!pq.empty()) {
            ListNode* current = pq.top();
            pq.pop();

            dummy->next = current;
            dummy = dummy->next;

            if (current->next != NULL)
                pq.push(current->next);
            
            current -> next = NULL;
        }

        return result->next;
    }
};
