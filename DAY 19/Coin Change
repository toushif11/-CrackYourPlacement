class Solution {
public:
    int solve(int i,int amount,vector<int>& coins,vector<vector<int>>& dp){
        if(amount == 0) return 0;
        if(i < 0) return 1e9;

        if(dp[i][amount] != -1) return dp[i][amount];

        int take = 1e9;
        if(amount >= coins[i]){
            take = 1 + solve(i,amount-coins[i],coins,dp); 
        }
        int nontake = solve(i-1,amount,coins,dp);

        return dp[i][amount] = min(take,nontake);
    }

    int coinChange(vector<int>& coins, int amount) {
        sort(coins.begin(),coins.end());
        int n = coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,1e9));

        for(int i=0;i<n;i++){
            dp[i][0] = 0;
        }

        for(int i=0;i<n;i++){
            for(int j=1;j<=amount;j++){
                int take = 1e9;
                if(j >= coins[i]){
                    take = 1 + dp[i][j-coins[i]]; 
                }
                int nontake = (( i-1 < 0 ) ? 1e9 : dp[i-1][j]);

                dp[i][j] = min(take,nontake);
            }
        }

        int ans = dp[n-1][amount];
        return (ans == 1e9) ? -1 : ans;
    }
};
