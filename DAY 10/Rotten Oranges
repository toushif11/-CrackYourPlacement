class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>> vis(n,vector<int>(m,0));
        
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({i,j});
                    vis[i][j] = 1;
                }
                else if(grid[i][j] == 0){
                    vis[i][j] = 1;
                }
            }
        }
        
        int drow[] = {-1, 0, 1, 0};
        int dcol[] = {0, 1, 0, -1};
        
        int time = 0;
        while(!q.empty()){
            int size = q.size();
            
            for(int i=0;i<size;i++){
                auto it = q.front();
                q.pop();
                
                int row = it.first;
                int col = it.second;
                
                for(int i=0;i<4;i++){
                    int nrow = row + drow[i];
                    int ncol = col + dcol[i];
                    
                    if(nrow >= 0 && nrow < n && ncol < m && ncol >=0 && 
                    !vis[nrow][ncol]){
                        q.push({nrow,ncol});
                        vis[nrow][ncol] = 1;
                    }
                }
            }
            time++;
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j] == 0) return -1;
            }
        }
        if(time == 0) return 0;
        return time-1;
    }
};
